from aiogram.filters import CommandStart, Command, or_f, StateFilter
from aiogram import F, types, Router, Bot
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import StatesGroup, State
from django.contrib.auth.models import User
from django.contrib.auth import authenticate
from django.db.models import Q
from rest_framework.authtoken.models import Token

from sqlalchemy.ext.asyncio import AsyncSession

from adv_app.models import Advertisement, Favourites
from .keyboards import get_keyboard, get_callback_btns
from .middlewares import AuthSession


router = Router()

# –≤–∞—Ä–∏–∞–Ω—Ç—ã –º–µ–Ω—é
START_KB = [
    "–í—Å–µ –æ–±—ä—è–≤–ª–µ–Ω–∏—è",
    "üîé –ü–æ–∏—Å–∫ –æ–±—ä—è–≤–ª–µ–Ω–∏–π",
    "üì≤ –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è",
]
START_KB_PLACEHOLDER = "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ"
START_KB_SIZES = (2, 1)

START_AUTH_KB = [
    "–í—Å–µ o–±—ä—è–≤–ª–µ–Ω–∏—è",  # o - –ª–∞—Ç–∏–Ω–∏—Ü–∞! –¥–ª—è –≤–∞—Ä–∏–∞–Ω—Ç–∞ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ –≤–µ—Ç–≤–ª–µ–Ω–∏—è —Å –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–µ–π/–±–µ–∑
    "üîé –ü–æ–∏—Å–∫ –æ–±—ä—è–≤–ª–µ–Ω–∏–π",
    "üìå –ú–æ–∏ –æ–±—ä—è–≤–ª–µ–Ω–∏—è",
    "üìù –ß–µ—Ä–Ω–æ–≤–∏–∫–∏",
    "‚ûï –ù–æ–≤–æ–µ –æ–±—ä—è–≤–ª–µ–Ω–∏–µ",
    "‚≠ê –ò–∑–±—Ä–∞–Ω–Ω–æ–µ",
    "üì¥ –í—ã–π—Ç–∏ –∏–∑ –∞–∫–∫–∞—É–Ω—Ç–∞",
]
START_AUTH_PLACEHOLDER = "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ"
START_AUTH_SIZES = (2, 2, 2)

# —Å—Ç–∞—Ç—É—Å—ã –∑–∞—è–≤–æ–∫ –¥–ª—è inline-–∫–Ω–æ–ø–æ–∫
STATE_BTNS = {'OPEN': 'state_open', 'CLOSED': 'state_closed', 'DRAFT': 'state_draft'}


@router.message(CommandStart())
async def start_cmd(message: types.Message):
    """
    –ö–æ–º–∞–Ω–¥–∞ /start
    """
    await message.answer(
        "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –≤ –º–µ–Ω—é",
        reply_markup=get_keyboard(
            *START_KB, placeholder=START_KB_PLACEHOLDER, sizes=START_KB_SIZES
        ),
    )


# noinspection PyUnusedLocal
@router.message(
    F.text == "–í—Å–µ o–±—ä—è–≤–ª–µ–Ω–∏—è"
)  # –≤–µ—Ä—Å–∏—è –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–µ—Å—Ç—å –æ–ø—Ü–∏—è –¥–æ–±–∞–≤–∏—Ç—å –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–µ)
async def get_cmd(message: types.Message, session: AsyncSession, auth_token: str):
    """
    –í—ã–≤–µ—Å—Ç–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –ø–æ –≤—Å–µ–º OPEN –æ–±—ä—è–≤–ª–µ–Ω–∏—è–º
    """
    # info = await orm_get_all_open_advertisements(session)
    info = Advertisement.objects.filter(status="OPEN")

    await message.answer(f"–í—Å–µ –æ–±—ä—è–≤–ª–µ–Ω–∏—è: {len(info)}")
    for adv in info:
        await message.answer(
            f"<b>{adv.title}:</b>\n{adv.description}\n<i>{adv.status}</i>\nuser: {adv.creator_id}",
            reply_markup=get_callback_btns(btns={"–î–æ–±–∞–≤–∏—Ç—å –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–µ": f"add-fvr_{adv.id}"}),
        )


@router.message(F.text == "–í—Å–µ –æ–±—ä—è–≤–ª–µ–Ω–∏—è")
async def get_cmd_unauth(message: types.Message, session: AsyncSession):
    """
    –í—ã–≤–µ—Å—Ç–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –ø–æ –≤—Å–µ–º OPEN –æ–±—ä—è–≤–ª–µ–Ω–∏—è–º.
    –í–µ—Ä—Å–∏—è –Ω–µ–∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–Ω–µ—Ç –æ–ø—Ü–∏–∏ –¥–æ–±–∞–≤–∏—Ç—å –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–µ)
    """
    # info = await orm_get_all_open_advertisements(session)
    # –ø–æ–ø—Ä–æ–±—É–µ–º —Ç–∞–∫–æ–µ, —Ä–∞–∑ –Ω–µ –ø–∞—à–µ—Ç –∞—Å–∏–Ω—Ö—Ä–æ–Ω –≤ —Ä–∞—Å–∫–ª–∞–¥–µ runscript'–∞
    info = Advertisement.objects.filter(status="OPEN")

    await message.answer(f"–í—Å–µ –æ–±—ä—è–≤–ª–µ–Ω–∏—è: {len(info)}")
    for adv in info:
        await message.answer(
            f"<b>{adv.title}:</b>\n{adv.description}\n<i>{adv.status}</i>\nuser: {adv.creator_id}"
        )


# noinspection PyUnresolvedReferences
@router.message(F.text == "üìå –ú–æ–∏ –æ–±—ä—è–≤–ª–µ–Ω–∏—è")
async def get_my_advs(message: types.Message, session: AsyncSession, auth_token: str):
    """
    –í—ã–≤–µ—Å—Ç–∏ –≤—Å–µ –æ–±—ä—è–≤–ª–µ–Ω–∏—è –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–≤—Å–µ —Å—Ç–∞—Ç—É—Å—ã)
    """
    user_id = Token.objects.get(key=auth_token).user.id
    # info = await orm_get_user_advertisements(session, user_id)
    info = Advertisement.objects.filter(creator_id=user_id)

    await message.answer(f"–ú–æ–∏ –æ–±—ä—è–≤–ª–µ–Ω–∏—è: {len(info)}")
    for adv in info:
        await message.answer(
            f"üìå <b>{adv.title}:</b>\n{adv.description}\n<i>{adv.status}</i>\nuser: {adv.creator_id}",
            reply_markup=get_callback_btns(
                btns={
                    "–ò–∑–º–µ–Ω–∏—Ç—å": f"update-adv_{adv.id}_{auth_token}",
                    "–£–¥–∞–ª–∏—Ç—å": f"delete-adv_{adv.id}_{auth_token}",
                }
            ),
        )


# noinspection PyUnresolvedReferences
@router.message(F.text == "üìù –ß–µ—Ä–Ω–æ–≤–∏–∫–∏")
async def get_my_drafts(message: types.Message, session: AsyncSession, auth_token: str):
    """
    –í—ã–≤–µ—Å—Ç–∏ –≤—Å–µ —á–µ—Ä–Ω–æ–≤–∏–∫–∏ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    """
    user_id = Token.objects.get(key=auth_token).user.id
    # info = await orm_get_user_drafts(session, user_id)
    info = Advertisement.objects.filter(creator_id=user_id, status="DRAFT")

    await message.answer(f"–ß–µ—Ä–Ω–æ–≤–∏–∫–∏: {len(info)}")
    for adv in info:
        await message.answer(
            f"üìù <b>{adv.title}:</b>\n{adv.description}\n<i>{adv.status}</i>\nuser: {adv.creator_id}",
            reply_markup=get_callback_btns(
                btns={
                    "–ò–∑–º–µ–Ω–∏—Ç—å": f"update-adv_{adv.id}_{auth_token}",
                    "–£–¥–∞–ª–∏—Ç—å": f"delete-adv_{adv.id}_{auth_token}",
                }
            ),
        )


@router.message(F.text == "‚≠ê –ò–∑–±—Ä–∞–Ω–Ω–æ–µ")
async def get_my_favourites(message: types.Message, session: AsyncSession, auth_token: str):
    """
    –í—ã–≤–µ—Å—Ç–∏ –≤—Å–µ –æ–±—ä—è–≤–ª–µ–Ω–∏—è, –Ω–∞—Ö–æ–¥—è—â–∏–µ—Å—è —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–º
    """
    usr = User.objects.filter(auth_token__key=auth_token).first()
    # fvs = usr.favourites.all()
    # info = await orm_get_user_favourites(session, fvs)
    info = usr.favourites.all()

    await message.answer(f"–ú–æ–µ –∏–∑–±—Ä–∞–Ω–Ω–æ–µ: {len(info)}")
    # for adv in info:
    #     await message.answer(f'‚≠ê <b>{adv.title}:</b>\n{adv.description}\n<i>{adv.status}</i>\nuser: {adv.creator_id}',
    #                          reply_markup=get_callback_btns(
    #                              btns={'–£–±—Ä–∞—Ç—å –∏–∑ –∏–∑–±—Ä–∞–Ω–Ω–æ–≥–æ': f'rm-fvr_{adv.id}_{auth_token}'}))
    for adv in info:
        await message.answer(
            f"‚≠ê <b>{adv.advertisement.title}:</b>\n{adv.advertisement.description}\n<i>"
            f"{adv.advertisement.status}</i>\nuser: {adv.advertisement.creator_id}",
            reply_markup=get_callback_btns(
                btns={"–£–±—Ä–∞—Ç—å –∏–∑ –∏–∑–±—Ä–∞–Ω–Ω–æ–≥–æ": f"rm-fvr_{adv.advertisement.id}_{auth_token}"}
            ),
        )


@router.message(F.text == "üì¥ –í—ã–π—Ç–∏ –∏–∑ –∞–∫–∫–∞—É–Ω—Ç–∞")
async def start_menu(message: types.Message, bot: Bot):
    """
    –í–æ–∑–≤—Ä–∞—Ç –≤ —Å—Ç–∞—Ä—Ç–æ–≤–æ–µ –º–µ–Ω—é —Å –ø–æ–∫–∞–∑–æ–º –≤—Å–µ—Ö –æ–±—ä—è–≤–ª–µ–Ω–∏–π –∏ —Ñ–∏–ª—å—Ç—Ä–æ–º –±–µ–∑ –∏–Ω–ª–∞–π–Ω-–∫–Ω–æ–ø–æ–∫
    """
    await message.answer(
        "–í—ã –≤—ã—à–ª–∏ –∏–∑ –∞–∫–∫–∞—É–Ω—Ç–∞",
        reply_markup=get_keyboard(
            *START_KB, placeholder=START_KB_PLACEHOLDER, sizes=START_KB_SIZES
        ),
    )
    bot.is_authenticated = None


""" ------------------------ –ø—Ä–æ—Å—Ç—ã–µ CallbackQuery —Å–æ–±—ã—Ç–∏—è ------------------------------"""


# noinspection PyUnresolvedReferences
@router.callback_query(F.data.startswith("delete-adv_"))
async def delete_adv(callback: types.CallbackQuery, session: AsyncSession):
    """
    –£–¥–∞–ª–∏—Ç—å —Å–≤–æ–µ –æ–±—ä—è–≤–ª–µ–Ω–∏–µ –ø–æ –∏–Ω–ª–∞–π–Ω-–∫–Ω–æ–ø–∫–µ
    """
    id_for_delete = int(callback.data.split("_")[1])
    auth_token = callback.data.split("_")[2]
    user_id = Token.objects.filter(key=auth_token).first().user.id

    try:
        # await orm_delete_advertisement(session, id_for_delete, user_id)
        del_ = Advertisement.objects.filter(creator_id=user_id, id=id_for_delete).delete()[0]
        if del_:
            await callback.answer("–£–¥–∞–ª–µ–Ω–æ", show_alert=True)
            await callback.message.answer(f"–í—ã —É–¥–∞–ª–∏–ª–∏ —Å–≤–æ–µ –æ–±—ä—è–≤–ª–µ–Ω–∏–µ id {id_for_delete}")
        else:
            await callback.message.answer(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞.\n–î–µ–π—Å—Ç–≤–∏–µ –Ω–µ —É–¥–∞–ª–æ—Å—å")
    except (Exception,) as e:
        await callback.message.answer(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {e}.\n–î–µ–π—Å—Ç–≤–∏–µ –Ω–µ —É–¥–∞–ª–æ—Å—å")


# noinspection PyUnresolvedReferences
@router.callback_query(F.data.startswith("rm-fvr_"))
async def delete_from_fvs(callback: types.CallbackQuery, session: AsyncSession):
    """
    –£–¥–∞–ª–∏—Ç—å –æ–±—ä—è–≤–ª–µ–Ω–∏–µ –∏–∑ —Å–≤–æ–µ–≥–æ –ò–∑–±—Ä–∞–Ω–Ω–æ–≥–æ –ø–æ –∏–Ω–ª–∞–π–Ω-–∫–Ω–æ–ø–∫–µ
    """
    id_for_delete = int(callback.data.split("_")[1])
    auth_token = callback.data.split("_")[2]
    user_id = Token.objects.filter(key=auth_token).first().user.id

    try:
        # await orm_delete_from_favourites(session, id_for_delete, user_id)
        del_ = Favourites.objects.filter(user_id=user_id, advertisement_id=id_for_delete).delete()[
            0
        ]
        if del_:
            await callback.answer("–£–¥–∞–ª–µ–Ω–æ", show_alert=True)
            await callback.message.answer("–û–±—ä—è–≤–ª–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–æ –∏–∑ –∏–∑–±—Ä–∞–Ω–Ω–æ–≥–æ")
        else:
            await callback.message.answer(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞.\n–î–µ–π—Å—Ç–≤–∏–µ –Ω–µ —É–¥–∞–ª–æ—Å—å")
    except (Exception,) as e:
        await callback.message.answer(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {e}.\n–î–µ–π—Å—Ç–≤–∏–µ –Ω–µ —É–¥–∞–ª–æ—Å—å")


# noinspection PyUnresolvedReferences
@router.callback_query(F.data.startswith("add-fvr_"))
async def add_to_fvs(callback: types.CallbackQuery, auth_token: str):
    """
    –î–æ–±–∞–≤–∏—Ç—å –æ–±—ä—è–≤–ª–µ–Ω–∏–µ –≤ —Å–≤–æ–µ –ò–∑–±—Ä–∞–Ω–Ω–æ–µ –ø–æ –∏–Ω–ª–∞–π–Ω-–∫–Ω–æ–ø–∫–µ
    """
    id_for_add = int(callback.data.split("_")[-1])
    usr_id = Token.objects.get(key=auth_token).user.id
    adv = Advertisement.objects.filter(id=id_for_add).first()

    if adv.creator.id == usr_id:
        await callback.message.answer(
            "–ù–µ–ª—å–∑—è –¥–æ–±–∞–≤–∏—Ç—å –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–µ —Å–æ–±—Å—Ç–≤–µ–Ω–Ω–æ–µ –æ–±—ä—è–≤–ª–µ–Ω–∏–µ",
            reply_markup=get_keyboard(
                *START_AUTH_KB, placeholder=START_AUTH_PLACEHOLDER, sizes=START_AUTH_SIZES
            ),
        )
    else:
        try:
            # —á—Ç–æ–±—ã –Ω–µ –¥—É–±–ª–∏—Ä–æ–≤–∞—Ç—å –≥–æ—Ç–æ–≤—ã–µ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è –Ω–∞ —Å–æ–∑–¥–∞–Ω–∏–µ –∑–∞–ø–∏—Å–∏
            Favourites.objects.create(advertisement_id=id_for_add, user_id=usr_id)
            await callback.message.answer(
                "–û–±—ä—è–≤–ª–µ–Ω–∏–µ –¥–æ–±–∞–≤–ª–µ–Ω–æ –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–µ",
                reply_markup=get_keyboard(
                    *START_AUTH_KB, placeholder=START_AUTH_PLACEHOLDER, sizes=START_AUTH_SIZES
                ),
            )
        except Exception as e:
            if "UNIQUE constraint failed" in str(e):
                msg = "–û–±—ä—è–≤–ª–µ–Ω–∏–µ —É–∂–µ –µ—Å—Ç—å –≤ –ò–∑–±—Ä–∞–Ω–Ω–æ–º"
            else:
                msg = f"–ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {e}"
            await callback.message.answer(
                msg,
                reply_markup=get_keyboard(
                    *START_AUTH_KB, placeholder=START_AUTH_PLACEHOLDER, sizes=START_AUTH_SIZES
                ),
            )


""" ------------------------ –ë–ª–æ–∫ FSM ------------------------------"""


class AddAdv(StatesGroup):
    """
    –î–ª—è –≤–≤–æ–¥–∞ –¥–∞–Ω–Ω—ã—Ö –¥–æ–±–∞–≤–ª–µ–Ω–∏—è/–∏–∑–º–µ–Ω–µ–Ω–∏—è –æ–±—ä—è–≤–ª–µ–Ω–∏—è
    """

    title = State()
    description = State()
    status = State()

    adv_object = None  # –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å update

    texts = {  # –¥–ª—è –≤—ã–≤–æ–¥–∞ –ø–æ –¥–µ–π—Å—Ç–≤–∏—é —à–∞–≥ –Ω–∞–∑–∞–¥
        "AddAdv:title": "–í–≤–µ–¥–∏—Ç–µ –∑–∞–≥–æ–ª–æ–≤–æ–∫ –æ–±—ä—è–≤–ª–µ–Ω–∏—è –∑–∞–Ω–æ–≤–æ",
        "AddAdv:description": "–í–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ –æ–±—ä—è–≤–ª–µ–Ω–∏—è –∑–∞–Ω–æ–≤–æ",
        "AddAdv:status": "–í—ã –Ω–∞ –ø–æ—Å–ª–µ–¥–Ω–µ–º —à–∞–≥–µ",
    }


class AddLogIn(StatesGroup):
    """
    –î–ª—è –≤–≤–æ–¥–∞ –¥–∞–Ω–Ω—ã—Ö –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
    """

    login = State()
    password = State()


class AddSearch(StatesGroup):
    """
    –î–ª—è –≤–≤–æ–¥–∞ –∫–ª—é—á–∞ –ø–æ–∏—Å–∫–∞ –ø–æ –æ–±—ä—è–≤–ª–µ–Ω–∏—è–º
    """

    search = State()


# noinspection PyUnresolvedReferences
@router.message(StateFilter("*"), or_f((F.text.casefold() == "–æ—Ç–º–µ–Ω–∞"), (Command("cancel"))))
async def cancel_handler(message: types.Message, state: FSMContext, bot: Bot) -> None:
    """
    –û—Ç–º–µ–Ω–∞ –¥–∏–∞–ª–æ–≥–∞ –∏ –ø–æ–ª–Ω—ã–π —Å–±—Ä–æ—Å —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    """
    current_state = await state.get_state()
    if current_state is None:
        return

    await state.clear()
    if bot.is_authenticated:
        await message.answer(
            "–î–µ–π—Å—Ç–≤–∏—è –æ—Ç–º–µ–Ω–µ–Ω—ã",
            reply_markup=get_keyboard(
                *START_AUTH_KB, placeholder=START_AUTH_PLACEHOLDER, sizes=START_AUTH_SIZES
            ),
        )
    else:
        await message.answer(
            "–î–µ–π—Å—Ç–≤–∏—è –æ—Ç–º–µ–Ω–µ–Ω—ã",
            reply_markup=get_keyboard(
                *START_KB, placeholder=START_KB_PLACEHOLDER, sizes=START_KB_SIZES
            ),
        )


@router.message(StateFilter("*"), F.text.casefold() == "–Ω–∞–∑–∞–¥")
async def step_back_add_adv(message: types.Message, state: FSMContext):
    """
    –í–æ–∑–≤—Ä–∞—Ç –∫ –ø—Ä–µ–¥—ã–¥—É—â–µ–º—É —à–∞–≥—É —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏/–∏–∑–º–µ–Ω–µ–Ω–∏–∏ –æ–±—ä—è–≤–ª–µ–Ω–∏—è
    """
    current_state = await state.get_state()

    # –µ—Å–ª–∏ —ç—Ç–æ –ø–µ—Ä–≤—ã–π —à–∞–≥
    if current_state == AddAdv.title:
        await message.answer(
            '–ü—Ä–µ–¥—ã–¥—É—â–µ–≥–æ —à–∞–≥–∞ –Ω–µ—Ç, –≤–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –æ–±—ä—è–≤–ª–µ–Ω–∏—è –∏–ª–∏ –Ω–∞–ø–∏—à–∏—Ç–µ "–æ—Ç–º–µ–Ω–∞"'
        )
        return

    previous = None
    for step in AddAdv.__all_states__:
        if step.state == current_state:
            await state.set_state(previous)
            await message.answer(
                f"<b>–í—ã –≤–µ—Ä–Ω—É–ª–∏—Å—å –∫ –ø—Ä–µ–¥—ã–¥—É—â–µ–º—É —à–∞–≥—É</b>.\n{AddAdv.texts[previous.state]}"
            )
            return
        previous = step


@router.message(StateFilter(None), F.text == "üîé –ü–æ–∏—Å–∫ –æ–±—ä—è–≤–ª–µ–Ω–∏–π")
async def search_advs_start(message: types.Message, state: FSMContext):
    """
    –ü–û–ò–°–ö, —à–∞–≥ 1.
    –í—Ö–æ–¥ –≤ –æ–∂–∏–¥–∞–Ω–∏–µ –ø–æ–∏—Å–∫–æ–≤–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞
    """
    await message.answer(
        f"<b>–í–≤–µ–¥–∏—Ç–µ –∫–ª—é—á–µ–≤–æ–µ —Å–ª–æ–≤–æ/—Ñ—Ä–∞–∑—É –¥–ª—è –Ω–∞—á–∞–ª–∞ –ø–æ–∏—Å–∫–∞.</b>\n–°–∏—Å—Ç–µ–º–∞ –±—É–¥–µ—Ç –∏—Å–∫–∞—Ç—å –ø–æ —Å–æ–≤–ø–∞–¥–µ–Ω–∏—é "
        f"–≤ –Ω–∞–∑–≤–∞–Ω–∏–∏ –∏–ª–∏ –æ–ø–∏—Å–∞–Ω–∏–∏ –æ–±—ä—è–≤–ª–µ–Ω–∏—è",
        reply_markup=types.ReplyKeyboardRemove(),
    )
    await state.set_state(AddSearch.search)


# noinspection PyUnresolvedReferences
@router.message(AddSearch.search, F.text)
async def search_advs_result(
    message: types.Message, state: FSMContext, session: AsyncSession, bot: Bot
):
    """
    –ü–û–ò–°–ö, —à–∞–≥ 2.
    –ù–∞—Ö–æ–¥–∏—Ç –≤—Å–µ –æ–±—ä—è–≤–ª–µ–Ω–∏—è, –≤ –Ω–∞–∑–≤–∞–Ω–∏–∏ –∏–ª–∏ –æ–ø–∏—Å–∞–Ω–∏–∏ –∫–æ—Ç–æ—Ä—ã—Ö –≤—Å—Ç—Ä–µ—á–∞–µ—Ç—Å—è –ø–æ–∏—Å–∫–æ–≤–æ–µ —Å–ª–æ–≤–æ/—Ñ—Ä–∞–∑–∞ –∏
    –Ω–∞—Ö–æ–¥—è—â–∏–µ—Å—è –≤ —Å—Ç–∞—Ç—É—Å–µ 'OPEN'
    """
    await state.update_data(search_param=message.text)
    data = await state.get_data()
    # info = await orm_search_in_advertisements(session, data)
    info = Advertisement.objects.filter(status="OPEN").filter(
        Q(title__icontains=data["search_param"]) | Q(description__icontains=data["search_param"])
    )

    # –¥–ª—è –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å –∏–Ω–ª–∞–π–Ω–æ–º –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–µ
    if bot.is_authenticated:
        await message.answer(
            f"–ù–∞–π–¥–µ–Ω–æ –æ–±—ä—è–≤–ª–µ–Ω–∏–π: {len(info)}",
            reply_markup=get_keyboard(
                *START_AUTH_KB, placeholder=START_AUTH_PLACEHOLDER, sizes=START_AUTH_SIZES
            ),
        )
        for adv in info:
            await message.answer(
                f"üîé <b>{adv.title}:</b>\n{adv.description}\n<i>{adv.status}</i>\nuser: {adv.creator_id}",
                reply_markup=get_callback_btns(btns={"–î–æ–±–∞–≤–∏—Ç—å –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–µ": f"add-fvr_{adv.id}"}),
            )

    else:
        await message.answer(
            f"–ù–∞–π–¥–µ–Ω–æ –æ–±—ä—è–≤–ª–µ–Ω–∏–π: {len(info)}",
            reply_markup=get_keyboard(
                *START_KB, placeholder=START_KB_PLACEHOLDER, sizes=START_KB_SIZES
            ),
        )
        for adv in info:
            await message.answer(
                f"üîé <b>{adv.title}:</b>\n{adv.description}\n<i>{adv.status}</i>\nuser: {adv.creator_id}"
            )
    await state.clear()


@router.message(StateFilter(None), F.text == "üì≤ –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è")
async def check_user(message: types.Message, state: FSMContext):
    """
    –ê–í–¢–û–†–ò–ó–ê–¶–ò–Ø, —à–∞–≥ 1.
    –ó–∞–ø—Ä–æ—Å –∏–º–µ–Ω–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    """
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è", reply_markup=types.ReplyKeyboardRemove())
    await state.set_state(AddLogIn.login)


@router.message(AddLogIn.login, F.text)
async def check_user_set_username(message: types.Message, state: FSMContext):
    """
    –ê–í–¢–û–†–ò–ó–ê–¶–ò–Ø, —à–∞–≥ 2.
    –ó–∞–ø—Ä–æ—Å –≤–≤–æ–¥–∞ –ø–∞—Ä–æ–ª—è
    """
    await state.update_data(username=message.text)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å")
    await state.set_state(AddLogIn.password)


@router.message(AddLogIn.password, F.text)
async def check_user_set_password(message: types.Message, state: FSMContext, bot: Bot):
    """
    –ê–í–¢–û–†–ò–ó–ê–¶–ò–Ø, —à–∞–≥ 3.
    –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–∞–Ω–Ω—ã—Ö, –∑–∞–ø–∏—Å—å —Ç–æ–∫–µ–Ω–∞ –≤ middleware –∏ –ø—Ä–æ—Å—Ç–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–∏–∑–Ω–∞–∫–∞ is_authenticated –≤ –±–æ—Ç
    """
    await state.update_data(password=message.text)
    await message.delete()  # —É–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –ø–∞—Ä–æ–ª–µ–º
    data = await state.get_data()

    usr = authenticate(username=data["username"], password=data["password"])
    if usr:
        # —Ç–æ–∫–µ–Ω –ø–µ—Ä–µ–¥–∞–µ—Ç—Å—è –≤ middleware –ø–æ –ª–æ–≥–∏–Ω—É –∏ –ø–∞—Ä–æ–ª—é
        router.message.middleware(AuthSession(auth_token=usr.auth_token.key))
        router.callback_query.middleware(AuthSession(auth_token=usr.auth_token.key))

        # –≤–µ—à–∞–µ–º –ø—Ä–∏–∑–Ω–∞–∫ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –±–æ—Ç—É, —á—Ç–æ–±—ã –ø–æ–¥–±–∏—Ä–∞—Ç—å—Å—è –≤ –≤–µ—Ç–≤–ª–µ–Ω–∏–∏ –ø–æ–≤–µ–¥–µ–Ω–∏—è –≤ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞—Ö, –≥–¥–µ –ø—Ä–æ—â–µ —Ç–∞–∫
        bot.is_authenticated = True
        await message.answer(
            f"–ü—Ä–∏–≤–µ—Ç, {usr.username}!",
            reply_markup=get_keyboard(
                *START_AUTH_KB, placeholder=START_AUTH_PLACEHOLDER, sizes=START_AUTH_SIZES
            ),
        )

    else:
        await message.answer(
            "–Ω–µ–≤–µ—Ä–Ω—ã–π –ª–æ–≥–∏–Ω –∏–ª–∏ –ø–∞—Ä–æ–ª—å, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞—Ç—å—Å—è –∑–∞–Ω–æ–≤–æ",
            reply_markup=get_keyboard(
                *START_KB, placeholder=START_KB_PLACEHOLDER, sizes=START_KB_SIZES
            ),
        )
    await state.clear()


@router.callback_query(StateFilter(None), F.data.startswith("update-adv_"))
async def update_adv_start(callback: types.CallbackQuery, state: FSMContext, session: AsyncSession):
    """
    UPDATE –æ–±—ä—è–≤–ª–µ–Ω–∏—è –ø–æ –∏–Ω–ª–∞–π–Ω, —à–∞–≥ 1.
    –ó–∞–ø–∏—Å—å id –∏ –æ–±—ä–µ–∫—Ç–∞ –æ–±—ä—è–≤–ª–µ–Ω–∏—è. –ó–∞–ø—Ä–æ—Å –≤–≤–æ–¥–∞ –Ω–∞–∑–≤–∞–Ω–∏—è
    """
    adv_id = int(callback.data.split("_")[1])
    await state.update_data(id=adv_id)

    # adv_for_update = await orm_get_advertisement_by_id(session, adv_id)
    adv_for_update = Advertisement.objects.get(id=adv_id)
    AddAdv.adv_object = adv_for_update  # —Å–æ—Ö—Ä–∞–Ω—è–µ–º –æ–±—ä–µ–∫—Ç, —á—Ç–æ–±—ã –æ–±—Ä–∞—â–∞—Ç—å—Å—è –∫ –µ–≥–æ –∞—Ç—Ä–∏–±—É—Ç–∞–º

    await callback.answer()
    await callback.message.answer(
        "<b>–°–µ–π—á–∞—Å –±–æ—Ç –∑–∞–ø—Ä–æ—Å–∏—Ç –¥–∞–Ω–Ω—ã–µ –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è –æ–±—ä—è–≤–ª–µ–Ω–∏—è.</b>\n–ï—Å–ª–∏ –≤—ã —Ö–æ—Ç–∏—Ç–µ "
        "–æ—Å—Ç–∞–≤–∏—Ç—å –ø—Ä–µ–¥—ã–¥—É—â–µ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –∏ <b>–ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å –∫–∞–∫–æ–µ-–ª–∏–±–æ –ø–æ–ª–µ</b>, —Ç–æ –≤–≤–µ–¥–∏—Ç–µ "
        "—Å–∏–º–≤–æ–ª —Ç–æ—á–∫–∏ .\n–ï—Å–ª–∏ —Ö–æ—Ç–∏—Ç–µ –≤–µ—Ä–Ω—É—Ç—å—Å—è –Ω–∞ —à–∞–≥ –Ω–∞–∑–∞–¥ –∏ –∏–∑–º–µ–Ω–∏—Ç—å —É–∫–∞–∑–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ, "
        "–≤–≤–µ–¥–∏—Ç–µ –≤ —Å—Ç—Ä–æ–∫–µ —Å–ª–æ–≤–æ <b>–Ω–∞–∑–∞–¥</b>"
    )
    await callback.message.answer(
        "–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –æ–±—ä—è–≤–ª–µ–Ω–∏—è", reply_markup=types.ReplyKeyboardRemove()
    )
    await state.set_state(AddAdv.title)


# noinspection PyUnusedLocal
@router.message(StateFilter(None), F.text == "‚ûï –ù–æ–≤–æ–µ –æ–±—ä—è–≤–ª–µ–Ω–∏–µ")
async def create_adv(
    message: types.Message, state: FSMContext, auth_token: str
):  # –¥–ª—è –∑–∞–∫—Ä—ã—Ç–∏—è –¥–æ—Å—Ç—É–ø–∞ –Ω–µ–∞–≤—Ç–æ—Ä–∏–∑–æ–≤
    """
    ADD –æ–±—ä—è–≤–ª–µ–Ω–∏–µ, —à–∞–≥ 1.
    –ó–∞–ø—Ä–æ—Å –≤–≤–æ–¥–∞ –Ω–∞–∑–≤–∞–Ω–∏—è
    """
    await message.answer(
        "<b>–°–µ–π—á–∞—Å –±–æ—Ç –∑–∞–ø—Ä–æ—Å–∏—Ç –¥–∞–Ω–Ω—ã–µ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –æ–±—ä—è–≤–ª–µ–Ω–∏—è.</b>\n–ï—Å–ª–∏ –≤—ã –∑–∞—Ö–æ—Ç–∏—Ç–µ –≤–µ—Ä–Ω—É—Ç—å—Å—è –Ω–∞ "
        "—à–∞–≥ –Ω–∞–∑–∞–¥ –∏ –∏–∑–º–µ–Ω–∏—Ç—å —É–∫–∞–∑–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ, –≤–≤–µ–¥–∏—Ç–µ –≤ —Å—Ç—Ä–æ–∫–µ —Å–ª–æ–≤–æ <b>–Ω–∞–∑–∞–¥</b>"
    )
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –æ–±—ä—è–≤–ª–µ–Ω–∏—è", reply_markup=types.ReplyKeyboardRemove())
    await state.set_state(AddAdv.title)


@router.message(AddAdv.title, F.text)
async def create_adv_set_title(message: types.Message, state: FSMContext):
    """
    UPDATE/ADD –æ–±—ä—è–≤–ª–µ–Ω–∏—è, —à–∞–≥ 2.
    –ó–∞–ø–∏—Å—å –Ω–∞–∑–≤–∞–Ω–∏—è, –æ–∂–∏–¥–∞–Ω–∏–µ –æ–ø–∏—Å–∞–Ω–∏—è
    """

    # –ª–æ–≥–∏–∫–∞ –ø—Ä–æ–ø—É—Å–∫–∞ —à–∞–≥–∞ –ø—Ä–∏ –∞–ø–¥–µ–π—Ç–µ, –æ—Å—Ç–∞–≤–ª—è–µ–º —Å—Ç–∞—Ä—ã–µ –¥–∞–Ω–Ω—ã–µ
    if message.text == ".":
        await state.update_data(title=AddAdv.adv_object.title)

    else:
        if len(message.text) > 5:
            await state.update_data(title=message.text)
        else:
            await message.answer(
                "–ù–∞–∑–≤–∞–Ω–∏–µ –æ–±—ä—è–≤–ª–µ–Ω–∏—è –Ω–µ –º–æ–∂–µ—Ç —Å–æ–¥–µ—Ä–∂–∞—Ç—å –º–µ–Ω–µ–µ 5 —Å–∏–º–≤–æ–ª–æ–≤. –í–≤–µ–¥–∏—Ç–µ –∑–∞–Ω–æ–≤–æ"
            )
            return

    await message.answer("–í–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ –æ–±—ä—è–≤–ª–µ–Ω–∏—è")
    await state.set_state(AddAdv.description)


@router.message(AddAdv.description, F.text)
async def create_adv_set_descr(message: types.Message, state: FSMContext):
    """
    UPDATE/ADD –æ–±—ä—è–≤–ª–µ–Ω–∏—è, —à–∞–≥ 3.
    –ó–∞–ø–∏—Å—å –æ–ø–∏—Å–∞–Ω–∏—è, –∑–∞–ø—Ä–æ—Å —Å—Ç–∞—Ç—É—Å–∞
    """

    # –ª–æ–≥–∏–∫–∞ –ø—Ä–æ–ø—É—Å–∫–∞ —à–∞–≥–∞ –ø—Ä–∏ –∞–ø–¥–µ–π—Ç–µ, –æ—Å—Ç–∞–≤–ª—è–µ–º —Å—Ç–∞—Ä—ã–µ –¥–∞–Ω–Ω—ã–µ
    if message.text == ".":
        await state.update_data(description=AddAdv.adv_object.description)

    else:
        if len(message.text) > 5:
            await state.update_data(description=message.text)
        else:
            await message.answer("–û–ø–∏—Å–∞–Ω–∏–µ –Ω–µ –º–æ–∂–µ—Ç —Å–æ–¥–µ—Ä–∂–∞—Ç—å –º–µ–Ω–µ–µ 5 —Å–∏–º–≤–æ–ª–æ–≤. –í–≤–µ–¥–∏—Ç–µ –∑–∞–Ω–æ–≤–æ")
            return

    # await message.answer("–í–≤–µ–¥–∏—Ç–µ —Å—Ç–∞—Ç—É—Å OPEN, CLOSED –ò–õ–ò DRAFT")
    await message.answer(text='–í—ã–±–µ—Ä–∏—Ç–µ —Å—Ç–∞—Ç—É—Å –æ–±—ä—è–≤–ª–µ–Ω–∏—è', reply_markup=get_callback_btns(
        btns=STATE_BTNS, sizes=(3,)))
    await state.set_state(AddAdv.status)


## noinspection PyUnresolvedReferences
@router.callback_query(AddAdv.status)
async def create_adv_set_status_creator(
        callback: types.CallbackQuery, session: AsyncSession, state: FSMContext, auth_token: str
):
    """
    UPDATE/ADD –æ–±—ä—è–≤–ª–µ–Ω–∏—è, —à–∞–≥ 4.
    –ó–∞–ø–∏—Å—å —Å—Ç–∞—Ç—É—Å–∞ –∏ —Å–æ–∑–¥–∞–Ω–∏–µ/–∏–∑–º–µ–Ω–µ–Ω–∏–µ
    """

    passed_state = [i for i in STATE_BTNS if STATE_BTNS[i] == callback.data]

    if passed_state:
        await state.update_data(status=passed_state[0])
    else:
        await callback.message.answer(
            text='–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ. –í–≤–µ–¥–∏—Ç–µ —Å—Ç–∞—Ç—É—Å –∑–∞–Ω–æ–≤–æ', reply_markup=get_callback_btns(
                btns=STATE_BTNS, sizes=(3, )))
        return

    user = Token.objects.filter(key=auth_token).first().user
    await state.update_data(creator=user)
    data = await state.get_data()

    adv_id = None
    if data.get("id"):
        adv_id = data.pop("id")

    # –ø—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø—Ä–∏ —Å–º–µ–Ω–µ —Å—Ç–∞—Ç—É—Å–∞/—Å–æ–∑–¥–∞–Ω–∏–∏ –Ω–µ –ø—Ä–µ–≤—ã—à–∞–µ—Ç –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ –¥–æ–ø—É—Å—Ç–∏–º–æ–µ –∫–æ–ª-–≤–æ –æ–±—ä—è–≤–ª–µ–Ω–∏–π
    if passed_state[0] == "OPEN":
        counter = Advertisement.objects.filter(status="OPEN", creator=user).count()
        if counter >= 10:
            # –ø—Ä–æ–≤–µ—Ä–∫–∞, —á—Ç–æ —ç—Ç–æ –Ω–µ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —É–∂–µ —Ä–∞–Ω–µ–µ –æ—Ç–∫—Ä—ã—Ç–æ–≥–æ –æ–±—ä—è–≤–ª–µ–Ω–∏—è
            if AddAdv.adv_object:
                if AddAdv.adv_object.status != "OPEN":
                    await callback.message.answer(
                        "–£ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –º–æ–∂–µ—Ç –±—ã—Ç—å –Ω–µ –±–æ–ª–µ–µ 10 –æ—Ç–∫—Ä—ã—Ç—ã—Ö –æ–±—ä—è–≤–ª–µ–Ω–∏–π –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω–æ"
                    )
                    return
            # –µ—Å–ª–∏ —Å–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –ø—Ä–∏ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ –¥–æ–ø—É—Å—Ç–∏–º–æ–º –∑–Ω–∞—á–µ–Ω–∏–∏
            else:
                await callback.message.answer(
                    "–£ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –º–æ–∂–µ—Ç –±—ã—Ç—å –Ω–µ –±–æ–ª–µ–µ 10 –æ—Ç–∫—Ä—ã—Ç—ã—Ö –æ–±—ä—è–≤–ª–µ–Ω–∏–π –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω–æ"
                )
                return

    try:
        res, _ = Advertisement.objects.update_or_create(id=adv_id, creator=user, defaults={**data})
        if res:
            msg = "–û–±—ä—è–≤–ª–µ–Ω–∏–µ –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–æ"
        else:
            msg = "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞"
    except Exception as e:
        msg = f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {e} "

    await state.clear()
    AddAdv.adv_object = None
    await callback.message.answer(
        msg,
        reply_markup=get_keyboard(
            *START_AUTH_KB, placeholder=START_AUTH_PLACEHOLDER, sizes=START_AUTH_SIZES
        ),
    )


# # noinspection PyUnresolvedReferences
# @router.message(AddAdv.status, F.text)
# async def create_adv_set_status_creator(message: types.Message, state: FSMContext, auth_token: str):
#     """
#     UPDATE/ADD –æ–±—ä—è–≤–ª–µ–Ω–∏—è, —à–∞–≥ 4.
#     –ó–∞–ø–∏—Å—å —Å—Ç–∞—Ç—É—Å–∞ –∏ —Å–æ–∑–¥–∞–Ω–∏–µ/–∏–∑–º–µ–Ω–µ–Ω–∏–µ
#     """
#
#     # –ª–æ–≥–∏–∫–∞ –ø—Ä–æ–ø—É—Å–∫–∞ —à–∞–≥–∞ –ø—Ä–∏ –∞–ø–¥–µ–π—Ç–µ, –æ—Å—Ç–∞–≤–ª—è–µ–º —Å—Ç–∞—Ä—ã–µ –¥–∞–Ω–Ω—ã–µ
#     if message.text == ".":
#         await state.update_data(status=AddAdv.adv_object.status)
#
#     else:
#         # –ø—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ–ø—É—Å—Ç–∏–º–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞
#         if {message.text}.intersection(["OPEN", "DRAFT", "CLOSED", "."]):
#             await state.update_data(status=message.text)
#         else:
#             await message.answer("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ. –í–≤–µ–¥–∏—Ç–µ —Å—Ç–∞—Ç—É—Å –∑–∞–Ω–æ–≤–æ")
#             return
#
#     user = Token.objects.filter(key=auth_token).first().user
#     await state.update_data(creator=user)
#     data = await state.get_data()
#
#     # –ø—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø—Ä–∏ —Å–º–µ–Ω–µ —Å—Ç–∞—Ç—É—Å–∞/—Å–æ–∑–¥–∞–Ω–∏–∏ –Ω–µ –ø—Ä–µ–≤—ã—à–∞–µ—Ç –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ –¥–æ–ø—É—Å—Ç–∏–º–æ–µ –∫–æ–ª-–≤–æ –æ–±—ä—è–≤–ª–µ–Ω–∏–π
#     if message.text == "OPEN":
#         counter = Advertisement.objects.filter(status="OPEN", creator=user).count()
#         if counter >= 5:
#             # –ø—Ä–æ–≤–µ—Ä–∫–∞, —á—Ç–æ —ç—Ç–æ –Ω–µ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —É–∂–µ —Ä–∞–Ω–µ–µ –æ—Ç–∫—Ä—ã—Ç–æ–≥–æ –æ–±—ä—è–≤–ª–µ–Ω–∏—è
#             if AddAdv.adv_object:
#                 if AddAdv.adv_object.status != "OPEN":
#                     await message.answer(
#                         "–£ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –º–æ–∂–µ—Ç –±—ã—Ç—å –Ω–µ –±–æ–ª–µ–µ 5 –æ—Ç–∫—Ä—ã—Ç—ã—Ö –æ–±—ä—è–≤–ª–µ–Ω–∏–π –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω–æ"
#                     )
#                     return
#             # –µ—Å–ª–∏ —Å–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –ø—Ä–∏ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ –¥–æ–ø—É—Å—Ç–∏–º–æ–º –∑–Ω–∞—á–µ–Ω–∏–∏
#             else:
#                 await message.answer(
#                     "–£ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –º–æ–∂–µ—Ç –±—ã—Ç—å –Ω–µ –±–æ–ª–µ–µ 5 –æ—Ç–∫—Ä—ã—Ç—ã—Ö –æ–±—ä—è–≤–ª–µ–Ω–∏–π –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω–æ"
#                 )
#                 return
#
#     adv_id = None
#     if data.get("id"):
#         adv_id = data.pop("id")
#
#     try:
#         res, _ = Advertisement.objects.update_or_create(id=adv_id, creator=user, defaults={**data})
#         if res:
#             msg = "–û–±—ä—è–≤–ª–µ–Ω–∏–µ –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–æ"
#         else:
#             msg = "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞"
#     except Exception as e:
#         msg = f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {e} "
#
#     await state.clear()
#     AddAdv.adv_object = None
#     await message.answer(
#         msg,
#         reply_markup=get_keyboard(
#             *START_AUTH_KB, placeholder=START_AUTH_PLACEHOLDER, sizes=START_AUTH_SIZES
#         ),
#     )
